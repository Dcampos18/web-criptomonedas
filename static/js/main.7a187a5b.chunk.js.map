{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","componentes/Error.js","componentes/Formulario.js","componentes/Cotizacion.js","componentes/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Name","FullName","Id","MensajeError","p","backgroundColor","padding","color","fontSize","textTransform","fontWeight","textAlign","fontFamily","width","marginLeft","Error","mensaje","Boton","input","marginTop","border","borderRadius","Formulario","guardarMoneda","guardarCriptomoneda","listaCripto","guardardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a187a5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React, { Fragment, useState } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst Label = styled.label`\r\n    font-family; 'Bebas Beue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n    width: 150%;\r\n    margin-left: -80px;\r\n    margin-bottom: 1rem;\r\n`\r\n\r\nconst Select = styled.select`\r\n    width: 150%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    margin-left: -150px;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    //State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial)\r\n    \r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">--- Seleccione ---</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    )\r\n\r\n    // Retornar state, interfaz y funcion que modifica el state\r\n    return [state, Seleccionar, actualizarState]\r\n}\r\n\r\nexport default useMoneda ","import React, { Fragment, useState } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst Label = styled.label`\r\n    font-family; 'Bebas Beue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n    width: 150%;\r\n    margin-left: -140px;\r\n    margin-bottom: 1rem;\r\n`\r\n\r\nconst Select = styled.select`\r\n    width: 150%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    margin-left: -150px;\r\n    font-size: 1.2rem;\r\n    margin-bottom: 1.2rem;\r\n`\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    //State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial)\r\n    \r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">--- Seleccione ---</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    )\r\n\r\n    // Retornar state, interfaz y funcion que modifica el state\r\n    return [state, SelectCripto, actualizarState]\r\n}\r\n\r\nexport default useCriptomoneda ","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst MensajeError = styled.p({\r\n    backgroundColor: \"#D30F0F\",\r\n    padding: \"1rem\",\r\n    color: \"#FFF\",\r\n    fontSize: 30,\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"Bebas Neue\" && \"cursive\",\r\n    width: \"145%\",\r\n    marginLeft: -150\r\n})\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (\r\n        <MensajeError>{mensaje}</MensajeError>\r\n    )\r\n}\r\n\r\nexport default Error","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled'\r\n\r\nimport useMoneda from '../hooks/useMoneda'\r\nimport useCriptomoneda from '../hooks/useCriptomoneda'\r\nimport axios from 'axios';\r\nimport Error from '../componentes/Error'\r\n\r\nconst Boton = styled.input({\r\n    marginTop: 20,\r\n    fontWeight: \"bold\",\r\n    fontSize: 20,\r\n    padding: 10,\r\n    backgroundColor: \"#66a2FE\",\r\n    border: \"none\",\r\n    width: \"150%\",\r\n    borderRadius: 10,\r\n    color: \"#FFF\",\r\n    marginLeft: -150\r\n})\r\n\r\nconst Formulario = ({guardarMoneda,  guardarCriptomoneda }) => {\r\n\r\n    const MONEDAS = [\r\n        {codigo: 'USD', nombre: 'Dolar Americano'},\r\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\r\n        {codigo: 'EUR', nombre: 'Euro'},\r\n        {codigo: 'GBP', nombre: 'Libra Esterlina'}\r\n    ]\r\n\r\n    const [ listaCripto, guardardarCriptomonedas ] = useState([])\r\n    const [ error, guardarError ] = useState(false)\r\n\r\n    // Utilizamos useMoneda\r\n    const [moneda, SelectMonedas] = useMoneda('Elige tu Moneda', '', MONEDAS)\r\n\r\n    //Utilizamos useCriptomonedas\r\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Elige tu Criptomoneda', '', listaCripto)\r\n\r\n    useEffect(() => {\r\n        const consultarAPI = async () => {\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\r\n\r\n            const resultado = await axios.get(url)\r\n            guardardarCriptomonedas(resultado.data.Data);\r\n        }\r\n        consultarAPI()\r\n    }, [])\r\n\r\n    //cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault()\r\n        //validar si ambos campos estan llenos\r\n        if(moneda === '' || criptomoneda === ''){\r\n            guardarError(true)\r\n            return\r\n        }\r\n\r\n        // pasar los datos al componente principal\r\n        guardarError(false)\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n    return (\r\n        <form \r\n            onSubmit={cotizarMoneda}\r\n        >\r\n            {error ? <Error mensaje=\"Todos los Campos son Obligatorios\"/> : null}\r\n            <SelectMonedas />\r\n            <SelectCripto />\r\n            <Boton \r\n                type=\"submit\"\r\n                value=\"Calcular\"\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Formulario","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    width: 150%;\r\n    border: 1px\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n    margin-left: -150px;\r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n    margin-left: -150px;\r\n`\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    console.log(resultado)\r\n\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Precio>El precio es: <span>{resultado.PRICE}</span> </Precio>\r\n            <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span> </Info>\r\n            <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span> </Info>\r\n            <Info>Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span> </Info>\r\n            <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span> </Info>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div class=\"sk-chase\">\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, {useState, useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\nimport imagen from './cryptomonedas.png';\nimport Formulario from './componentes/Formulario';\nimport Cotizacion from './componentes/Cotizacion';\nimport Spinner from './componentes/Spinner';\n\nconst Contenedor = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n  margin-left: -150px;\n`;\nconst Heading = styled.h1`\n\tfont-family: 'Bebas Neue', cursive;\n\tcolor: #FFF;\n\ttext-align:left;\n\tfont-weight: 700;\n\tfont-size: 50px;\n\tmargin-bottom: 50px;\n\tmargin-top: 80px;\n\tmargin-left: -150px;\n\n\t&::after {\n\t\tcontent: '';\n\t\twidth: 100px;\n\t\theight: 6px;\n\t\tbackground-color: #66A2FE;\n\t\tdisplay:block;\n\t}\n`;\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect( () => {\n\n      const cotizarCriptomoneda = async () => {\n          // evitamos la ejecución la primera vez\n          if(moneda === '') return;\n\n          // consultar la api para obtener la cotizacion\n          const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n          const resultado = await axios.get(url);\n\n          // mostrar el spinner\n          guardarCargando(true);\n\n          // ocultar el spinner y mostrar el resultado\n          setTimeout(() => {\n\n            // cambiar el estado de cargando\n            guardarCargando(false);\n\n            // guardar cotizacion\n            guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda] );\n          }, 3000);\n\n          \n      }\n      cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  // Mostrar spinner o resultado\n  const componente = (cargando) ? <Spinner /> :  <Cotizacion  resultado={resultado} />\n\n  return (\n    <Contenedor>\n        <div>\n          <Imagen \n            src={imagen}\n            alt=\"imagen cripto\"\n          />\n        </div>\n        <div>\n            <Heading>Cotiza Criptomonedas al Instante</Heading>\n\n            <Formulario \n              guardarMoneda={guardarMoneda}\n              guardarCriptomoneda={guardarCriptomoneda}\n            />\n\n            {componente}\n            \n        </div>\n    </Contenedor>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}